#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import json
from importlib import import_module

parser = argparse.ArgumentParser(description='manager script for ontolox-db rulesets')
parser.add_argument('language', help="language key")
parser.add_argument('-c', '--config', nargs=1, help='config file path', metavar='config', dest='config')
parser.add_argument('--dont-ask', help="asume yes at questions", action="store_true")
rules = parser.add_argument_group('rules')
rules.add_argument('--adjective-antonyms', help="find antonyms for adjective", action="store_true")
rules.add_argument('--adjective-material-nouns', help="find adjectives for material nouns", action="store_true")
rules.add_argument('--noun-genders', help="find gender for noun forms", action="store_true")
rules.add_argument('--noun-plurals', help="find plurals for canonical nouns", action="store_true")
rules.add_argument('--verb-related-nouns', help="find related nouns for verbs", action="store_true")


args = parser.parse_args()
configfile = "config.json"
dont_ask = False

if args.config:
	configfile = args.config[0]

if args.dont_ask:
	dont_ask = True

# load config file
with open(configfile) as f:
	config = json.loads(f.read())


# import language module
# check for language existence later
mod = import_module('rulesets.' + args.language)
Ruleset = getattr(mod, "Ruleset")
r = Ruleset(config,dont_ask)

if args.adjective_antonyms:
	r.adjectiveAntonyms()

if args.adjective_material_nouns:
	r.adjectiveMaterialNouns()

if args.noun_genders:
	r.nounGender()

if args.noun_plurals:
	r.nounPlurals()

if args.verb_related_nouns:
	r.verbRelatedNouns()
