#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import json
import re
from database.mysql import Database

# we are assuming two types of target references,
# either internal, identified by target_value and target_pos,
# or external, identified by just an uri value
parser = argparse.ArgumentParser(description='manager script for ontolox-db senses')
parser.add_argument('action', choices=['add'], help="main operating mode")
parser.add_argument('mode', choices=['int','ext'], help="reference id type")
parser.add_argument('source_value', help="")
parser.add_argument('source_pos', help="")
parser.add_argument('namespace', help="")
parser.add_argument('property', help="")
parser.add_argument('target_value', help="")
parser.add_argument('-t', '--target_pos', nargs=1, help='partOfSpeech', metavar='partOfSpeech', dest='target_pos')
parser.add_argument('-c', '--config', nargs=1, help='config file path', metavar='path', dest='config')

args = parser.parse_args()
configfile = "config.json"
target_pos_id = 0

if args.config:
	configfile = args.config[0]

if args.mode == "int" and not args.target_pos:
	parser.error("we need a partOfSpeech for the target when working in internal reference mode")

# load config file
with open(configfile) as f:
	config = json.loads(f.read())

db = Database(config)
db.connect()
db.setPosses()

# set the pos ids
if args.source_pos not in db.posses:
	parser.error("invalid partOfSpeech for source: " + args.source_pos)

source_pos_id = db.posses[args.source_pos]
if args.target_pos:
	target_pos = args.target_pos[0]

	if target_pos not in db.posses:
		parser.error("invalid partOfSpeech for target: " + target_pos)
	
	target_pos_id = db.posses[target_pos]


if args.action == "add":
	db.addSense(args.source_value,source_pos_id,args.namespace,args.property,args.target_value,target_pos_id)
