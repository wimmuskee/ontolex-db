#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import json
from database.mysql import Database

parser = argparse.ArgumentParser(description='export script for ontolox-db')
parser.add_argument('-f', '--format', nargs=1, help='output format', metavar='format', dest='format')
parser.add_argument('-c', '--config', nargs=1, help='config file path', metavar='config', dest='config')
parser.add_argument('-l', '--lang', nargs=1, help='language iso-639-1', metavar='language', dest='language')
parser.add_argument('-i', '--identifier', nargs=1, help='local identifier', metavar='identifier', dest='identifier')
parser.add_argument('-v', '--value', nargs=1, help='word', metavar='value', dest='value')
parser.add_argument('-p', '--pos', nargs=1, help='partOfSpeech', metavar='partOfSpeech', dest='pos')

parser.add_argument('--package', help="build format package", action="store_true")
parser.add_argument('--redundant', help="set redundant relations", action="store_true")
parser.add_argument('--inverse', help="set inverse relations", action="store_true")
parser.add_argument('--transitive', help="set transitive relations, implies inverse and redundant", action="store_true")


args = parser.parse_args()
format = "turtle"
configfile = "config.json"
identifier = ""
value = ""
pos = ""
buildpackage = False
buildredundants = False
buildinverses = False
buildtransitives = False

if args.format:
	format = args.format[0]

if args.config:
	configfile = args.config[0]

if args.identifier:
	identifier = args.identifier[0]

if args.value:
	value = args.value[0]

if args.pos:
	pos = args.pos[0]

if args.package:
	buildpackage = True

if args.redundant:
	buildredundants = True

if args.inverse:
	buildinverses = True

if args.transitive:
	buildinverses = True
	buildredundants = True
	buildtransitives = True


# load config file
with open(configfile) as f:
	config = json.loads(f.read())

language = config["language"]
if args.language:
	language = args.language[0]


db = Database(config)
db.connect()


if pos:
	db.setPosses()
	if pos not in db.posses:
		parser.error("invalid partOfSpeech: " + pos)

# set entry lookup as identifier, later we can select by single pos and no value
if value and pos:
	identifier = db.getLexicalEntryID(value,db.posses[pos])


# language validation
db.setLanguages()
if language not in db.languages:
	parser.error("invalid language: " + language)




if identifier:
	db.setLexicalEntry(identifier)
	db.setLexicalForm(identifier,db.languages[language])
	db.setLexicalEntryLabels()
	db.setLexicalSensesByID(identifier)
elif pos:
	db.setLexicalEntriesByPOS(db.posses[pos])
	db.setLexicalFormsByEntries(db.languages[language])
	db.setLexicalEntryLabels()
	db.setLexicalSensesByEntries()
else:
	db.setLexicalEntries()
	db.setLexicalForms(db.languages[language])
	db.setLexicalEntryLabels()
	db.setLexicalSenses()

db.setLexicalFormProperties()
db.setSenseReferences()


if format == "xml" or format == "turtle":
	from format.lexicon import LexiconGraph
	output = LexiconGraph("mylexicon",language,format,buildpackage)
	output.setLexicalEntries(db.lexicalEntries)
	output.setLexicalForms(db.lexicalForms)
	output.setLexicalProperties(db.lexicalProperties)
	output.setLexicalSenses(db.lexicalSenses,db.lexicalEntryLabels)
	output.setSenseReferences(db.senseReferences)

elif format == "skos":
	from format.skos import SKOSGraph
	output = SKOSGraph("myconceptscheme",language,buildpackage)
	output.setConcepts(db.lexicalSenses,db.lexicalEntryLabels)
	output.setConceptRelations(db.senseReferences)


if buildredundants:
	output.setRedundants()

if buildinverses:
	output.setInverses()

if buildtransitives:
	output.setTransitives(config["transitiveSenseIdentifiers"])


output.printGraph()
