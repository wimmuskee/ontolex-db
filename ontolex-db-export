#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
from database.mysql import Database
from functions.common import validateInput, getConfig

parser = argparse.ArgumentParser(description='export script for ontolox-db')
parser.add_argument('-f', '--format', nargs=1, help='output format', metavar='format', dest='format')
parser.add_argument('-c', '--config', nargs=1, help='config file path', metavar='config', dest='config')
parser.add_argument('-l', '--lang', nargs=1, help='language iso-639-1', metavar='language', dest='language')
parser.add_argument('-i', '--identifier', nargs=1, help='local identifier', metavar='identifier', dest='identifier')
parser.add_argument('-v', '--value', nargs=1, help='word', metavar='value', dest='value')
parser.add_argument('-p', '--pos', nargs=1, help='partOfSpeech', metavar='partOfSpeech', dest='pos')

parser.add_argument('--package', help="build format package", action="store_true")
parser.add_argument('--redundant', help="set redundant relations", action="store_true")
parser.add_argument('--inverse', help="set inverse relations", action="store_true")
parser.add_argument('--transitive', help="set transitive relations, implies inverse and redundant", action="store_true")


args = parser.parse_args()
argsdict = vars(args)
license = ""
config = getConfig(argsdict)
identifier = validateInput(argsdict,"identifier")
value = validateInput(argsdict,"value")
pos = validateInput(argsdict,"pos")
language = validateInput(argsdict,"language",config["language"])
format = validateInput(argsdict,"format","turtle")
exportconfig = {}
buildpackage = False
buildredundants = False
buildinverses = False
buildtransitives = False

if args.package:
	buildpackage = True

if args.redundant:
	buildredundants = True

if args.inverse:
	buildinverses = True

if args.transitive:
	buildinverses = True
	buildredundants = True
	buildtransitives = True

if "export" in config:
	exportconfig = config["export"]

db = Database(config)
db.connect()
db.setLanguages()

if pos:
	db.setPosses()
	if pos not in db.posses:
		parser.error("invalid partOfSpeech: " + pos)

# set entry lookup as identifier
if value and pos:
	identifier = db.getLexicalEntryID(value,db.posses[pos])

# language validation
if language not in db.languages:
	parser.error("invalid language: " + language)


if identifier:
	db.setLexicalEntry(identifier)
	db.setLexicalEntryRelationsByID(identifier)
	db.setLexicalForm(identifier,db.languages[language])
	db.setLexicalEntryLabels()
	db.setLexicalFormPropertiesByID()
	db.setLexicalSensesByID(identifier)
	db.setSenseReferencesByID()
	db.setLexicalComponentsByID(identifier)
	db.setComponentsByID(identifier,db.languages[language])
else:
	db.setLexicalEntries()
	db.setLexicalEntryRelations()
	db.setLexicalForms(db.languages[language])
	db.setLexicalEntryLabels()
	db.setLexicalFormProperties()
	db.setLexicalSenses()
	db.setSenseReferences()
	db.setLexicalComponents()
	db.setComponents()

db.setSenseDefinitions(db.languages[language])


if format == "xml" or format == "turtle":
	from format.lexicon import LexiconGraph
	output = LexiconGraph("mylexicon",language,format,exportconfig,buildpackage)
	output.setLexicalEntries(db.lexicalEntries)
	output.setLexicalEntryRelatons(db.lexicalEntryRelations)
	output.setLexicalForms(db.lexicalForms)
	output.setLexicalProperties(db.lexicalProperties)
	output.setLexicalSenses(db.lexicalSenses,db.lexicalEntryLabels,db.lexicalSenseDefinitions)
	output.setSenseReferences(db.senseReferences)
	output.setLexicalComponents(db.lexicalEntryComponents)
	output.setComponents(db.components)

elif format == "skos":
	from format.skos import SKOSGraph
	output = SKOSGraph("myconceptscheme",language,exportconfig,buildpackage)
	output.setConcepts(db.lexicalSenses,db.lexicalEntryLabels,db.lexicalSenseDefinitions)
	output.setConceptRelations(db.senseReferences)


if buildredundants:
	output.setRedundants()

if buildinverses:
	output.setInverses()

if buildtransitives:
	output.setTransitives()


output.printGraph()
