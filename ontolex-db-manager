#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import re
from database.mysql import Database
from functions.common import validateInput, getConfig

parser = argparse.ArgumentParser(description='manager script for ontolox-db')
parser.add_argument('action', choices=['add','update'], help="main operating mode, add or update stuff")
parser.add_argument('mode', choices=['entry','form','formprops','sense','definition','relation','component','bulksense'], help="where to operate")
parser.add_argument('-c', '--config', nargs=1, help='config file path', metavar='path', dest='config')
parser.add_argument('-l', '--lang', nargs=1, help='language iso-639-1', metavar='language', dest='language')
commongroup = parser.add_argument_group('common options')
commongroup.add_argument('-s', '--source', nargs=1, help='source identifier', metavar='source', dest='source')
commongroup.add_argument('-w', '--word', nargs=1, help='word to add', metavar='word', dest='word')
entrygroup = parser.add_argument_group('entry options')
entrygroup.add_argument('-p', '--pos', nargs=1, help='part of speech', metavar='pos', dest='pos')
formgroup = parser.add_argument_group('form options')
formgroup.add_argument('-f', '--formprops', nargs='+', help='form properties', metavar='property:value', dest='formprops')
sensegroup = parser.add_argument_group('sense options')
sensegroup.add_argument('-d', '--definition', nargs=1, help='sense definition', metavar='string', dest='definition')
sensegroup.add_argument('-r', '--relation', nargs=1, help='sense relation', metavar='namespace:property', dest='relation')
sensegroup.add_argument('-t', '--target', nargs=1, help='sense relation target', metavar='uri', dest='target')
sensegroup.add_argument('-i', '--input', nargs=1, help='bulk sense input file', metavar='path', dest='input')


# set initial vars
args = parser.parse_args()
argsdict = vars(args)
config = getConfig(argsdict)
language = validateInput(argsdict,"language",config["language"])

# connect to database and set all vocabularies
db = Database(config)
db.connect()
db.setLanguages()
db.setPosses()
db.setProperties()
db.setSenseRelations()

# some generic validation
if language not in db.languages:
	parser.error("invalid language: " + language)

if args.mode != "entry":
	sourceID = validateInput(argsdict, "source")

	if not sourceID:
		parser.error("we need a source identifier for this operation")


# now do specific operation mode checks
if args.action == "add" and args.mode == "entry":
	word = validateInput(argsdict, "word")
	pos = validateInput(argsdict, "pos")

	if not word or not pos:
		parser.error("to add an entry we need a word and a partOfSpeech")

	if pos not in db.posses:
		parser.error("invalid partOfSpeech: " + pos)

	lexicalEntryID = db.storeCanonical(word,db.languages[language],db.posses[pos])
	print("Stored lexicalEntryID: " + str(lexicalEntryID))

elif args.action == "add" and args.mode == "form":
	word = validateInput(argsdict, "word")

	if not word:
		parser.error("to add another form we need a word")

	lexicalEntryID = db.getID(sourceID, "lexicalEntry")
	lexicalFormID = db.storeOtherForm(lexicalEntryID,word,db.languages[language])
	print("Stored lexicalFormID: " + str(lexicalFormID))

elif args.action == "add" and args.mode == "formprops":
	if args.formprops:
		properties = []
		propertyregex = re.compile(r'^[a-zA-Z]+:[a-zA-Z]+$')
		for property in args.formprops:
			if propertyregex.match(property):
				properties.append(property)
	else:
		parser.error("we need properties to add")

	for p in properties:
		if p not in db.properties:
			parser.error("invalid property provided: " + p)
	
	lexicalFormID = db.getID(sourceID,"lexicalForm")
	db.storeFormProperties(lexicalFormID,properties)
	print("Stored properties")

elif args.action == "add" and args.mode == "sense":
	lexicalEntryID = db.getID(sourceID, "lexicalEntry")
	lexicalSenseID = db.insertLexicalSense(lexicalEntryID,True)
	print("Stored lexicalSenseID: " + str(lexicalSenseID))

elif args.action == "add" and args.mode == "relation":
	target = validateInput(argsdict, "target")
	relation = validateInput(argsdict, "relation")
	
	if not target or not relation:
		parser.error("we need a target and a relation to continue")

	if relation not in db.senserelations:
		parser.error("invalid relation provided")

	lexicalSenseID = db.getID(sourceID,"lexicalSense")
	db.insertSenseReference(lexicalSenseID,relation,target,True)
	print("Stored sense reference")

elif args.action == "add" and args.mode == "definition":
	definition = validateInput(argsdict, "definition")

	if not definition:
		parser.error("we need a definition to add")

	lexicalSenseID = db.getID(sourceID,"lexicalSense")
	db.insertLexicalSenseDefinition(lexicalSenseID,db.languages[language],definition,True)
	print("definition stored: " + definition)

elif args.action == "add" and args.mode == "component":
	lexicalFormID = db.getID(sourceID,"lexicalForm")
	componentID = db.storeComponent(lexicalFormID)
	print("Stored component: " + str(componentID))

elif args.action == "add" and args.mode == "bulksense":
	relation = validateInput(argsdict, "relation")
	inputfile = validateInput(argsdict, "input")
	pos = validateInput(argsdict, "pos")

	if not relation or not inputfile or not pos:
		parser.error("we need a relation, a pos and an input file to continue")

	if relation not in db.senserelations:
		parser.error("invalid relation provided")

	if pos not in db.posses:
		parser.error("invalid partOfSpeech: " + pos)

	with open(inputfile) as f:
		content = f.readlines()
	
	for word in content:
		word = word.strip()
		lexicalEntryID = db.storeCanonical(word,db.languages[language],db.posses[pos])
		if not lexicalEntryID:
			lexicalEntryID = db.findLexicalEntry(word,db.posses[pos])

		db.storeLexicalSense(lexicalEntryID,relation,sourceID)

else:
	print("something is wrong")
